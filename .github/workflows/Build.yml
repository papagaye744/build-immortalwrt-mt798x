name: Build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device:
        description: '选择设备'     
        required: true
        default: '360t7' 
        type: choice
        options:
        - 360t7
        - rax3000m_nand
        - netcore_n60
      ssh:
        description: '是否使用SSH连接到Actions'
        required: false
        type: boolean
        default: false
      default_config:
        description: '默认配置文件'     
        required: false
        default: 'mt7981-ax3000.config' 
        type: choice
        options:
        - mt7981-ax3000.config
        - mt7986-ax6000.config
        - mt7986-ax6000-256m.config
        - mt7986-ax4200.config
      custom_config:
        description: '是否使用自定义编译配置'
        required: false
        type: boolean
        default: true
      default_lan_ip:
        description: '默认ip'
        default: 192.168.68.1
        required: false

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  TZ: Asia/Shanghai
  UPLOAD_OUTPUT: true

jobs:
   _build-immortalwrt-mt798x:
    runs-on: ubuntu-20.04
    permissions:
      contents: write

    steps:
    - name: 配置
      uses: actions/checkout@master

    - name: 配置环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack neofetch antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang clangd cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev libssl-dev libtool lld lldb lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply python-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev 

    - name: 克隆源码
      working-directory: /workdir
      run: |
        neofetch
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH --depth 1 openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 配置 Feeds
      run: |
        cd openwrt
        echo "src-git helloworld https://github.com/fw876/helloworld.git;main" >> "feeds.conf.default"
        cat feeds.conf.default
        ./scripts/feeds update -a
        #./scripts/feeds install -a
        # remove old package
        rm -rf feeds/packages/net/xray-core
        rm -rf feeds/packages/net/xray-plugin
        rm -rf feeds/packages/net/simple-obfs
        rm -rf feeds/luci/applications/luci-app-ssr-plus
        # update golang version
        rm -rf feeds/packages/lang/golang
        #svn co https://github.com/openwrt/packages/branches/openwrt-22.03/lang/golang feeds/packages/lang/golang
        #svn co https://github.com/openwrt/packages/branches/openwrt-23.05/lang/golang feeds/packages/lang/golang
        # https://github.blog/2023-01-20-sunsetting-subversion-support/
        mkdir -p feeds/packages/lang/golang
        git clone -b openwrt-23.05 --depth 1 https://github.com/openwrt/packages /tmp/openwrt-packages
        cp -R /tmp/openwrt-packages/lang/golang/* feeds/packages/lang/golang/
        rm -rf /tmp/openwrt-packages

        rm -rf feeds/packages/net/miniupnpd
        #svn co https://github.com/immortalwrt/packages/branches/openwrt-18.06/net/miniupnpd feeds/packages/net/miniupnpd
        mkdir -p feeds/packages/net/miniupnpd
        git clone -b openwrt-18.06 --depth 1 https://github.com/immortalwrt/packages /tmp/immortalwrt-packages
        cp -R /tmp/immortalwrt-packages/net/miniupnpd/* feeds/packages/net/miniupnpd/
        rm -rf /tmp/immortalwrt-packages

        git clone -b js --depth 1 https://github.com/gngpp/luci-theme-design.git  package/luci-theme-design
        # update openclash to ssrplus
        #sed -i 's/openclash.png/ssr.png/g;s/openclash/shadowsocksr/g' package/luci-theme-design/luasrc/view/themes/design/header.htm
        # update openclash to passwall
        sed -i 's/openclash.png/ssr.png/g;s/openclash/passwall/g' package/luci-theme-design/luasrc/view/themes/design/header.htm
        # drop mosdns and v2ray-geodata packages that come with the source
        find ./ | grep Makefile | grep v2ray-geodata | xargs rm -f
        find ./ | grep Makefile | grep mosdns | xargs rm -f
        git clone -b v5 --depth 1 https://github.com/sbwml/luci-app-mosdns package/mosdns
        git clone --depth 1 https://github.com/sbwml/v2ray-geodata package/v2ray-geodata
        git clone --depth 1 https://github.com/rufengsuixing/luci-app-adguardhome package/luci-app-adguardhome
        git clone --depth 1 https://github.com/sirpdboy/luci-app-autotimeset package/luci-app-autotimeset
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 修改默认配置
      run: |
        cd openwrt
        sed -i 's/192.168.1.1/{{ inputs.default_lan_ip }}/g' package/base-files/files/bin/config_generate

    - name: 加载自定义编译配置
      if: github.event.inputs.custom_config == 'true'
      run: |
        cd openwrt
        cp -f $GITHUB_WORKSPACE/${{ inputs.device }}.config .config

    - name: 加载默认编译配置
      if: github.event.inputs.custom_config == 'false'
      run: |
        cd openwrt
        cp -f defconfig/{{ inputs.default_config }} .config

    - name: SSH 连接
      uses: P3TERX/ssh2actions@v1.0.0
      if: github.event.inputs.ssh == 'true'
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载依赖
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name : 上传输出文件
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_OUTPUT == 'true' && !cancelled()
      with:
        name: ${{ inputs.device }}--${{ env.FILE_DATE }}
        path: openwrt/bin
